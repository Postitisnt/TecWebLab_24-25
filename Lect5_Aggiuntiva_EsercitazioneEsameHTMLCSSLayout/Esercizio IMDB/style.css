/* 
Ho messo alcuni sfondi a caso qua e là, sono commentati, 
se vi serve capire meglio cosa si sta selezionando, 
decommentate gli sfondi e guardate con i colori a quale
elemento fa riferimento la regola
*/

/*
Regole di spazio per flexbox (spiegazione flex:1 e flex:2):
    La sintassi completa di flex è:

        flex: [grow] [shrink] [basis];

    * flex-grow (grow):
        → Determina quanto lo spazio aggiuntivo viene distribuito tra gli elementi.
    * flex-shrink (shrink):
        → Determina quanto l'elemento si restringe quando lo spazio è insufficiente.
    * flex-basis (basis):
        → Determina la dimensione iniziale dell'elemento prima di distribuire spazio.

    Quando scrivi solo flex: 1 o flex: 2, stai specificando il fattore di crescita (grow),
    lasciando gli altri valori al loro comportamento predefinito.

    * flex: 1:
        → L'elemento può crescere occupando 1 unità di spazio disponibile rispetto agli altri elementi.
        → Se tutti gli elementi hanno flex: 1, lo spazio viene distribuito equamente.
    * flex: 2:
        → L'elemento può crescere occupando 2 unità di spazio disponibile.
        → Un elemento con flex: 2 riceve il doppio dello spazio rispetto a un elemento con flex: 1.
*/

/*#############################################################################################################################################*/

/*
Regole Generali per l'allineamento con flexbox
    * Con flex-direction: row (Default):
        - justify-content → Usato per l'asse orizzontale.
            (Es.: Spostare gli elementi a sinistra, al centro o a destra.)
        - align-items → Usato per l'asse verticale.
            (Es.: Allineare gli elementi in alto, al centro o in basso.)
    * Con flex-direction: column:
        - justify-content → Usato per l'asse verticale.
            (Es.: Distribuire gli elementi in alto, al centro o in basso.)
        - align-items → Usato per l'asse orizzontale.
            (Es.: Allineare gli elementi a sinistra, al centro o a destra.)
*/

/*#############################################################################################################################################*/

/*
Approfondimento position Relative e Absolute
    * Quando un elemento ha position: relative:
        - Rimane nel suo flusso normale all'interno del layout.
        - Potete spostarlo rispetto alla sua posizione originale usando proprietà come top, left, right, e bottom.
        - Non influenza il posizionamento degli altri elementi: 
            gli altri continuano a comportarsi come se l'elemento non fosse stato spostato.

        Ad esempio:

            <div style="position: relative; top: 20px; left: 10px;">
                Io sono relativo!
            </div>
                
            L'elemento si sposta di 20px verso il basso e di 10px verso destra rispetto alla sua posizione originale.
            Ma per gli altri elementi, esso sembra essere ancora nella sua posizione originale.

    * Quando un elemento ha position: absolute:
        - Esce dal flusso normale del layout (non occupa più spazio nel layout).
        - Viene posizionato in base al primo contenitore padre con position: relative, absolute o fixed.
            Se non trova un tale contenitore, si posiziona rispetto all'elemento <html> (cioè l'intera pagina).

        Ad esempio:

            <div style="position: absolute; top: 20px; left: 10px;">
                Io sono assoluto!
            </div>

            Questo elemento si posiziona 20px dal bordo superiore e 10px dal bordo sinistro della pagina.

        Altro esempio (ma con contenitore relativo):

            <div style="position: relative; width: 300px; height: 200px; background-color: lightblue;">
                Contenitore Relativo
                <div style="position: absolute; top: 20px; left: 10px; background-color: pink;">
                    Io sono assoluto!
                </div>
            </div>

            Il contenitore (div esterno) ha position: relative, quindi l'elemento 
            con "position: absolute" si posiziona rispetto ai bordi del contenitore.

    ***************************************************************************************************************************************************

    * Quando si usano insieme?
        Spesso si usano insieme per creare layout complessi, come nel caso dell'overlay. 
        Ecco come funziona in questo caso:

            - Il contenitore ha "position: relative";
                Questo rende il contenitore un riferimento per gli elementi con position: absolute al suo interno.

            - L'overlay ha "position: absolute" (e lo creiamo da zero come elemento vuoto);
                L'overlay si posiziona rispetto al contenitore relativo, non rispetto all'intera pagina.

        Perché serve?
            Se non avessimo usato "position: relative" sul contenitore, l'overlay overlay con "position: absolute" 
            si sarebbe posizionato rispetto alla pagina intera, rompendo il layout.
*/

/*#############################################################################################################################################*/

/*
Approfondimento :nth-child e :nth-of-type

    * Cos'è :nth-child?
        - Seleziona il "n-esimo figlio" di un elemento genitore, indipendentemente dal tipo di elemento.
        - Considera tutti i figli (es. div, p, span) e conta la loro posizione sequenziale nel genitore.

        Ad esempio:
            <div>
                <p>Primo Paragrafo</p>   /* 1° figlio, 1° <p> 
                <span>Primo Span</span>  /* 2° figlio, 1° <span>
                <p>Secondo Paragrafo</p> /* 3° figlio, 2° <p>
            </div>

        CSS:
            div :nth-child(3) {
                color: green;
            }

        Risultato:
            - Il terzo figlio del div (<p>Secondo Paragrafo</p>) diventa verde,
                perché `nth-child` conta tutti i figli, ignorando il loro tipo.

    ******************************************************************************************************************

    * Cos'è :nth-of-type?
        - Seleziona il "n-esimo elemento di un certo tipo" tra i figli di un elemento genitore.
        - Conta solo gli elementi dello stesso tipo, ignorando gli altri.

        Ad esempio:
            <div>
                <p>Primo Paragrafo</p>   /* 1° figlio, 1° <p>
                <span>Primo Span</span>  /* 2° figlio, 1° <span>
                <p>Secondo Paragrafo</p> /* 3° figlio, 2° <p>
            </div>

        CSS:
            div p:nth-of-type(2) {
                color: orange;
            }

        Risultato:
            - Il secondo elemento <p> (<p>Secondo Paragrafo</p>) diventa arancione,
                ignorando la presenza degli <span>.

    ******************************************************************************************************************

    * Caso speciale: dal container al tipo e poi all'nth-child
        - Potete combinare il selettore del tipo (`p`, `span`, ecc.) con `nth-child` per avere ancora più controllo.

        Ad esempio:
            <div>
                <p>Primo Paragrafo</p>   /* 1° figlio, 1° <p>
                <span>Primo Span</span>  /* 2° figlio, 1° <span>
                <p>Secondo Paragrafo</p> /* 3° figlio, 2° <p>
            </div>

        CSS:
            div p:nth-child(2) {
                color: red;
            }

        Risultato:
            - Non seleziona nulla, perché il secondo figlio del <div> è un <span>, non un <p>, dunque il selettore è
                bagliato in questo caso. Per selezionare "<p>Secondo Paragrafo</p>" e farlo diventare red
                sarebbero stati corretti i selettori: 
                    * div p:nth-child(3)
                    * div :nth-child(3)
                    * div p:nth-of-type(2)

        ******************************************************************************************************************

    * Riepilogo:
        - `nth-child(n)`: Seleziona l'elemento solo se è il n-esimo figlio **nel flusso DOM**, ignorando il tipo.
        - `nth-of-type(n)`: Seleziona l'elemento solo se è il n-esimo figlio **del suo tipo**.
        - Se vuoi essere più specifico e selezionare un tipo **solo se ha una certa posizione sequenziale**, usa `nth-of-type`.

        Esempio conclusivo:
            <div>
                <p>Primo Paragrafo</p>   /* 1° figlio, 1° <p>
                <span>Primo Span</span>  /* 2° figlio, 1° <span>
                <p>Secondo Paragrafo</p> /* 3° figlio, 2° <p>
            </div>

        CSS:
            div :nth-child(3) {
                color: green;
            }
            Seleziona il terzo figlio (indipendentemente dal tipo), quindi <p>Secondo Paragrafo</p>.

            div p:nth-of-type(2) {
                color: orange;
            }
            Seleziona il secondo <p> figlio, ignorando gli <span>.
*/





/* General Styling */
body {
    font-family: Arial, sans-serif;
    margin: auto;
    padding: 0;
    background-color: #000;
    color: white;
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100vw;
    height: 100%;
}

p {
    /* Sovrascriviamo i margini di default dei paragrafi, poi se servono li aggiungiamo */
    margin: 0.2em 0 0.2em 0; /* top, right, bottom, left */
}

/* Header */
header {
    width: 100%;
    height: 5vh;
    padding: 0.5% 0 0.5% 0; /* top, right, bottom, left */
    background-color: rgb(20, 20, 20);
}

header > div {
    margin: auto;
    width: 80vw;
    height: 100%;
    display: flex;
    flex-direction: row;
}

header div div { 
    /* Questa serve ad allineare verticalmente al centro l'immagine e la barra di ricerca rispetto all'header */
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
}

header img {
    height: 80%;
    width: auto;
}

header div div:last-child { 
    /* Questa serve a dare al div contenente la barra di ricerca una larghezza tale da occupare il 100% del div container */
    /* Poi la dimensione è corretta dai gap */
    /* background-color: red; */
    align-items: center;
    width: 55vw; /* Larghezza specificata a occhio a seconda del risultato */
}

header input {
    height: 80%;
    width: 80%; /* Messa a occhio con quella sopra */
    border: none;
    border-radius: 5px;
}

/* Main Layout */
main {
    display: flex;
    flex-direction: row;
    flex: 1 0 auto;
    gap: 2%;
    width: 80vw; /* Come da specifiche (visto che il body occupa 100vw) */
    height: 75vh;
    margin-top: 1%;
    align-items: stretch; /* Estende l'altezza dei figli per essere uguali. Non cambia nulla se non lo mettete perché è già il valore di default */
}


/* Section layout */ 
section {
    flex: 2; /* occupa il doppio dello spazio della side*/
    height: 100%;
    position: relative;
    background-image:
        linear-gradient(to top, black 20%, black 10%, transparent), /* Gradiente nero */
        url("src/biutiful_screen.png"); /* Immagine di sfondo */
    background-size: cover; /* Assicura che l'immagine copra l'intero contenitore */
    background-position: center; /* Centra l'immagine */
}

section > div {
    height: 100%;
    display: flex;
    flex-direction: row;
}

section > div div:first-child { /* div contenente l'immagine */
    width: 30%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: flex-end;
}

section div div:first-child img {
    margin-left: 5%;
    margin-bottom: 10%;
    width: 90%;
}

section > div div:last-child { /* Div contenente il testo e il bottone e la durata */
    width: 85%;
    display: flex;
    flex-direction: row;
    align-items: flex-end; /* Sposta in basso gli elementi */
    justify-content: space-between; /* Spazia equamente gli elementi */
    margin-bottom: 5%;
    /* background-color: rgba(247, 0, 255, 0.584);*/
}

section div div:last-child span:first-child { /* Span che contiene il play button */
    /*background-color: red;*/
    width: 12.5%; /* Occupa il 12.5% dello spazio totale del div contenitore */
    display: flex;
    justify-content: center; /* Centra orizzontalmente */
    align-items: center; /* Centra verticalmente */
    padding: 2.5%;
}

section div div:last-child span:first-child img {
    width: 80%; /* Proporzioni corrette del play button */
}

section div div:last-child span:nth-child(2) { /* Span che contiene il titolo e il link */
    /*background-color: grey;*/
    width:40%;
    display: flex;
    flex-direction: column;
    justify-content: center; /* Centra verticalmente il contenuto */
    align-items: flex-start; /* Allinea il testo a sinistra */
    padding: 2.5%;
}

section div div:last-child span:nth-child(2) h1 {
    font-size: 2.5em; 
    margin: 2%;
    color: white; /* Colore del testo */
}

section div div:last-child span:nth-child(2) a { /*Link al trailer */
    font-size: 1em; /* Dimensione del link */
    color: rgba(255, 255, 255, 0.75);
    text-decoration: none;
    margin-top: 2%;
    margin-left: 5%;
}

section div div:last-child span:last-child { /* Span che contiene la durata */
    /* background-color: green; */
    width: 45%; /* Occupa il 10% dello spazio totale */
    padding: 5%;
    display: flex;
    justify-content: flex-start; /* Centra il testo orizzontalmente */
    align-items: flex-start; /* Centra il testo verticalmente */
    color: rgba(255, 255, 255, 0.75);
    font-size: 1rem;
}


/* Sidebar */
aside {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    height: 75vh;
}

aside div:first-child h3 {
    color: rgb(240, 216, 1);
    margin-bottom: 5%;
}

aside div:last-child h3 {
    margin-bottom: 5%;
}

aside > div:nth-child(2) {
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    background-image: linear-gradient(rgb(20, 20, 20), rgb(0, 0, 0));
    padding: 2%;
    height: 100%;
}

aside div:nth-child(2) div {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    gap: 5%;
    /*background-color: yellow;*/
    margin: 1%;
}

/* le prossime 3 regole servono a creare l'overlay bianco sull'immagine */
/* White overlay */

aside div:nth-child(2) div div:first-child:not(:has(img[alt="Play button"])) { /* Questa seleziona i div contenenti le immagini di poster, andando ad escludere quelle con i play button */
    width: 40%; /* Questa non c'entra nulla con l'overlay. Serve a dare una dimensione al div rispetto al container */
    position: relative; /* In questo caso, position relative rende il div un riferimento 
    per posizionare elementi al suo interno (necessario per l'overlay nello stile hover successivo).
    Vedere approfondimento position relative e absolute a inizio pagina.*/
    overflow: hidden; /* Nasconde qualsiasi contenuto che esce dai confini del div */
}

aside div:nth-child(2) div div:first-child:not(:has(img[alt="Play button"])) img {
    width: 100%; /* Fa si che l'immagine occupi il 100% del suo container, senza andare fuori */
    transition: all 0.3s ease; /* Aggiunge una transizione fluida (di 0.3 secondi) per qualsiasi cambiamento di stile applicato all'immagine */
}

aside div:nth-child(2) div div:first-child:not(:has(img[alt="Play button"])):hover::before {
    /* "::before" Crea un pseudo-elemento che viene inserito prima del contenuto del div 
    questo significa che noi dichiariamo e creiamo perciò lo pseudo-elemento (che ovviamente dovrà essere
    vuoto) con " content: ' ' ", il che implica che tale pseudo-elemento non ha alcun contenuto visibile di per sé */
    content: ''; /* Crea uno pseudo-elemento vuoto */
    position: absolute; /* Posiziona lo pseudo-elemento relativamente al div contenitore (reso possibile da position: relative; nel primo blocco). */
    /* (top, left) = 0, e (width, height) = 100% → Fanno in modo che lo pseudo-elemento (dunque l'overlay)
    vada a coprire il totle della larghezza del div su cui è posizionato (width e height al 100%), evitando
    di spostare tale overlay (top e left a 0) */
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgb(255, 255, 255, 0.5); /* Overlay bianco → dando uno sfondo allo pseudo elemento vuoto creiamo un overlay */
    z-index: 1; /* Porta l'overlay sopra l'immagine */
}

aside div:nth-child(2) div div:nth-child(2) {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: flex-start;
    /*background-color: rgb(218, 46, 172);*/
}

aside div:nth-child(2) > div > div > div:has(img[alt="Play button"]) { /* div contenente play button e durata */
    /*background-color: #ff0000;*/
    width: 40%;
    display: flex;
    flex-direction: row; /* Disposizione orizzontale degli elementi */
    align-items: flex-end; /* Allinea gli elementi al fondo */
    gap: 1vw;
}

aside div:nth-child(2) > div > div > div img[alt="Play button"] { /* img del play button */
    /*background-color: orange;*/
    width: 25%;
    height: auto; /* Mantiene le proporzioni dell'immagine */
}

aside div:nth-child(2) div div div p { /* Paragrafi delle durate */
    color: rgba(255, 255, 255, 0.75);
    font-size: 0.8em;
}

aside div:nth-child(2) div div span p { /* Paragrafi dei titoli */
    font-size: 1.25em;
}

aside div:nth-child(2) a { /* equivalente di "aside div div div span a" */
    text-decoration: none;
    color: rgba(255, 255, 255, 0.75);
    font-size: 1em;
}

aside div:nth-child(2) span p:hover {
    color: rgb(240, 216, 1);
}

aside div:last-child {
    margin-top: auto; /* Spinge "Esplora trailer" in fondo */
}

/* Responsive Design */
@media (max-width: 768px) {
    body {
        gap: 2vh;
    }
    main {
        flex-direction: column;
        justify-content: space-around;
        width: 95%;
    }
    header > div {
        margin-left: 2.5%;
        width: 100vw;
        height: 100%;
        display: flex;
        flex-direction: row;
    }
    header input {
        display: none;
    }
    aside {
        height: auto; /* Adatta l'altezza per evitare sovrapposizioni. Senza di questo avremmo l'ultimo div dell'aside che si sovrappone alle immagini del div centrale*/
    }
}
